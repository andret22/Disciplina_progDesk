/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.ClienteDAO;
import controller.ControllerClienteBinario;
import controller.ControllerClienteTexto;
import javax.swing.JOptionPane;
import model.Cliente;

/**
 *
 * @author andre
 */
public class ProcurarClienteView extends javax.swing.JFrame {

    //Controllers
    private ControllerClienteTexto ct = new ControllerClienteTexto();
    private ControllerClienteBinario cb = new ControllerClienteBinario();
    private ClienteDAO cd = new ClienteDAO();

    //Labels
    public static final int TEXT = 1;
    public static final int BINARY = 2;
    public static final int DATABASE = 3;
    private int mode;

    public ProcurarClienteView(int whereToSearch) {
        this.mode = whereToSearch;
        System.out.println("Entrando em modo " + mode);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileTypeButtons = new javax.swing.ButtonGroup();
        MenuExterno = new javax.swing.JInternalFrame();
        MenuInterno = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        nomeF = new javax.swing.JTextField();
        sobrenomeF = new javax.swing.JTextField();
        valorF = new javax.swing.JTextField();
        idadeF = new javax.swing.JTextField();
        cpfF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        buscarB = new javax.swing.JButton();
        salvarB = new javax.swing.JButton();
        voltarB = new javax.swing.JButton();
        removerB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MenuExterno.setVisible(true);

        MenuInterno.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Nome");

        jLabel3.setText("Sobrenome");

        jLabel4.setText("Valor gasto (R$)");

        jLabel5.setText("Idade");

        javax.swing.GroupLayout MenuInternoLayout = new javax.swing.GroupLayout(MenuInterno);
        MenuInterno.setLayout(MenuInternoLayout);
        MenuInternoLayout.setHorizontalGroup(
            MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuInternoLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(MenuInternoLayout.createSequentialGroup()
                        .addGroup(MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(32, 32, 32)
                        .addGroup(MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sobrenomeF)
                            .addComponent(valorF)
                            .addComponent(idadeF, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)))
                    .addGroup(MenuInternoLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(87, 87, 87)
                        .addComponent(nomeF, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        MenuInternoLayout.setVerticalGroup(
            MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuInternoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nomeF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sobrenomeF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(valorF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(MenuInternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(idadeF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 20, Short.MAX_VALUE))
        );

        jLabel1.setText("CPF");

        buscarB.setText("Buscar");
        buscarB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                buscarBMousePressed(evt);
            }
        });

        salvarB.setText("Salvar alterações");
        salvarB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                salvarBMousePressed(evt);
            }
        });

        voltarB.setText("Voltar");
        voltarB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                voltarBMousePressed(evt);
            }
        });

        removerB.setText("Remover");
        removerB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removerBMousePressed(evt);
            }
        });

        javax.swing.GroupLayout MenuExternoLayout = new javax.swing.GroupLayout(MenuExterno.getContentPane());
        MenuExterno.getContentPane().setLayout(MenuExternoLayout);
        MenuExternoLayout.setHorizontalGroup(
            MenuExternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuExternoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(MenuExternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(MenuExternoLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cpfF, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buscarB))
                    .addComponent(MenuInterno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(MenuExternoLayout.createSequentialGroup()
                        .addComponent(salvarB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removerB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(voltarB)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        MenuExternoLayout.setVerticalGroup(
            MenuExternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuExternoLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(MenuExternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cpfF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(buscarB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MenuInterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(MenuExternoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salvarB)
                    .addComponent(removerB)
                    .addComponent(voltarB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MenuExterno)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MenuExterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void voltarBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_voltarBMousePressed
        TelaInicialView ti = new TelaInicialView();
        ti.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_voltarBMousePressed

    private void buscarBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscarBMousePressed
        if (ct.CFile.getArquivo() != null || cb.BFile.getArquivo() != null || cd.checkConnection()) {
            buscar();
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um arquivo!!!", "Arquivo não encontrado", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buscarBMousePressed

    private void salvarBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salvarBMousePressed
        if (ct.CFile.getArquivo() != null || cb.BFile.getArquivo() != null || cd.checkConnection()) {
            alterar();
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um arquivo!!!", "Arquivo não encontrado", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_salvarBMousePressed

    private void removerBMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removerBMousePressed
        if (ControllerClienteTexto.CFile.getArquivo() != null || cb.BFile.getArquivo() != null || cd.checkConnection()) {
            remover();
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um arquivo!!!", "Arquivo não encontrado", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_removerBMousePressed

    private void buscar() {
        switch (this.mode) {
            case TEXT -> {
                System.out.println("Texto");
                try {
                    String[] resultado = ct.buscar(Long.parseLong(cpfF.getText()));
                    if (resultado != null) {
                        nomeF.setText(resultado[1]);
                        sobrenomeF.setText(resultado[2]);
                        idadeF.setText(resultado[3]);
                        valorF.setText(resultado[4]);
                    } else {
                        nomeF.setText("");
                        sobrenomeF.setText("");
                        valorF.setText("");
                        idadeF.setText("");
                        JOptionPane.showMessageDialog(this, "Cliente não encontado!!!", "Não encontrado", JOptionPane.INFORMATION_MESSAGE);

                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Formato inválido", "Inválido", JOptionPane.ERROR_MESSAGE);
                }
            }
            case BINARY -> {
                try {
                    Cliente cliente = cb.buscar(Long.parseLong(cpfF.getText()));
                    if (cliente != null && cb.BFile != null) {
                        nomeF.setText(cliente.getNome());
                        sobrenomeF.setText(cliente.getSobrenome());
                        idadeF.setText(String.valueOf(cliente.getIdade()));
                        valorF.setText(String.valueOf(cliente.getValorGasto()));
                    } else {
                        nomeF.setText("");
                        sobrenomeF.setText("");
                        valorF.setText("");
                        idadeF.setText("");
                        JOptionPane.showMessageDialog(this, "Cliente não encontado!!!", "Não encontrado", JOptionPane.INFORMATION_MESSAGE);

                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Formato inválido", "Inválido", JOptionPane.ERROR_MESSAGE);
                }
            }
            case DATABASE -> {
                try {
                    Cliente cliente = cd.buscar(Long.parseLong(cpfF.getText()));
                    if (cliente != null) {
                        nomeF.setText(cliente.getNome());
                        sobrenomeF.setText(cliente.getSobrenome());
                        idadeF.setText(String.valueOf(cliente.getIdade()));
                        valorF.setText(String.valueOf(cliente.getValorGasto()));
                    } else {
                        nomeF.setText("");
                        sobrenomeF.setText("");
                        valorF.setText("");
                        idadeF.setText("");
                        JOptionPane.showMessageDialog(this, "Cliente não encontado!!!", "Não encontrado", JOptionPane.INFORMATION_MESSAGE);

                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Formato inválido", "Inválido", JOptionPane.ERROR_MESSAGE);
                }
            }
            default -> {
                JOptionPane.showMessageDialog(this, "Algo deu errado!!!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void remover() {
        switch (this.mode) {
            case TEXT -> {
                String[] result = ct.buscar(Long.parseLong(cpfF.getText()));
                String[] novaInfo = "".split(";");
                if (ControllerClienteTexto.CFile.atualizaLinha(result, novaInfo, ct.getLinha())) {
                    cpfF.setText("");
                    nomeF.setText("");
                    sobrenomeF.setText("");
                    valorF.setText("");
                    idadeF.setText("");
                    JOptionPane.showMessageDialog(this, "Dados Removidos!!!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Algo deu errado!!!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
            case BINARY -> {
                if (cb.remover(Long.parseLong(cpfF.getText()))) {
                    cpfF.setText("");
                    nomeF.setText("");
                    sobrenomeF.setText("");
                    valorF.setText("");
                    idadeF.setText("");
                    JOptionPane.showMessageDialog(this, "Dados Removidos!!!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Algo deu errado!!!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
            case DATABASE -> {
                if (cd.excluir(Long.parseLong(cpfF.getText()))) {
                    JOptionPane.showMessageDialog(this, "Dados Removidos!!!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
                    cpfF.setText("");
                    nomeF.setText("");
                    sobrenomeF.setText("");
                    valorF.setText("");
                    idadeF.setText("");
                    cd.commit();
                } else {
                    JOptionPane.showMessageDialog(this, "Algo deu errado!!!", "Erro", JOptionPane.ERROR_MESSAGE);
                    cd.rollback();
                }
            }
            default ->
                JOptionPane.showMessageDialog(this, "Algo deu errado!!!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void alterar() {
        try {

            switch (this.mode) {
                case TEXT -> {
                    String[] result = ct.buscar(Long.parseLong(cpfF.getText()));
                    if (result != null) {
                        String[] novaInfo = (cpfF.getText() + ';' + nomeF.getText() + ';' + sobrenomeF.getText() + ';'
                                + valorF.getText() + ';' + idadeF.getText()).split(";");
                        if (ControllerClienteTexto.CFile.atualizaLinha(result, novaInfo, ct.getLinha())) {
                            JOptionPane.showMessageDialog(this, "Dados atualizados!!!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this, "Algo deu errado!!!", "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Objeto não existente. Impossível alterar", "Erro", JOptionPane.ERROR_MESSAGE);
                    }

                }
                case BINARY -> {
                    if (cb.alterar(cb.createCliente(Long.parseLong(cpfF.getText()),
                            nomeF.getText(),
                            sobrenomeF.getText(), Integer.parseInt(idadeF.getText()),
                            Float.parseFloat(valorF.getText())))) {
                        JOptionPane.showMessageDialog(this, "Dados atualizados!!!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Objeto não existente. Impossível alterar", "Erro", JOptionPane.ERROR_MESSAGE);
                    }

                }
                case DATABASE -> {
                    if (cd.alterar(field2object(), Long.parseLong(cpfF.getText()))) {
                        JOptionPane.showMessageDialog(this, "Dados atualizados!!!", "Atualização", JOptionPane.INFORMATION_MESSAGE);
                        cd.commit();
                    } else {
                        JOptionPane.showMessageDialog(this, "Objeto não existente. Impossível alterar", "Erro", JOptionPane.ERROR_MESSAGE);
                        cd.rollback();
                    }
                }
                default -> {
                    JOptionPane.showMessageDialog(this, "Algo deu errado!!!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Informações inválidas nos campos", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private Cliente field2object() {
        Cliente cli = new Cliente(Long.parseLong(cpfF.getText()), nomeF.getText(),
                sobrenomeF.getText(), Integer.parseInt(idadeF.getText()),
                Float.parseFloat(valorF.getText()));
        return cli;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame MenuExterno;
    private javax.swing.JPanel MenuInterno;
    private javax.swing.JButton buscarB;
    private javax.swing.JTextField cpfF;
    private javax.swing.ButtonGroup fileTypeButtons;
    private javax.swing.JTextField idadeF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField nomeF;
    private javax.swing.JButton removerB;
    private javax.swing.JButton salvarB;
    private javax.swing.JTextField sobrenomeF;
    private javax.swing.JTextField valorF;
    private javax.swing.JButton voltarB;
    // End of variables declaration//GEN-END:variables
}
